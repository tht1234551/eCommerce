plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id "io.freefair.lombok" version "6.3.0"
}

group = 'com.org'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.zapodot:embedded-jms-junit5:0.2'
    implementation 'com.google.code.gson:gson:2.10'
    testImplementation 'org.projectlombok:lombok:1.18.22'

    // jpa entityManagerFactory
    implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

//    compileOnly 'org.projectlombok:lombok'
//    annotationProcessor 'org.projectlombok:lombok'
//    testCompileOnly 'org.projectlombok:lombok'
//    testAnnotationProcessor 'org.projectlombok:lombok'
}


tasks.named('test') {
    useJUnitPlatform()
}

// 여기서 부터 리액트를 빋드하기 위한 코드
def reactDir = "$projectDir/src/main/webapp";

sourceSets {
    main {
        resources {
            srcDirs = ["$projectDir/src/main/resources"]
        }
    }
}

processResources {
    dependsOn "removeReactBuildFiles"
}

task installReact(type: Exec) {
    workingDir "$reactDir"
    inputs.dir "$reactDir"
    group = BasePlugin.BUILD_GROUP

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "audit", "fix"
        commandLine 'npm.cmd', 'install'
    } else {
        commandLine "npm", "audit", "fix"
        commandLine 'npm', 'install'
    }
}

task buildReact(type: Exec) {
    dependsOn "installReact"
    workingDir "$reactDir"
    inputs.dir "$reactDir"
    group = BasePlugin.BUILD_GROUP

    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine "npm.cmd", "run-script", "build"
    } else {
        commandLine "npm", "run-script", "build"
    }
}

task copyReactBuildFiles(type: Copy) {
    dependsOn "buildReact"
    from "$reactDir/build"
    into "$projectDir/src/main/resources/build"
}

task removeReactBuildFiles(type: Delete) {
    dependsOn "copyReactBuildFiles"
    delete "$reactDir/build"
}